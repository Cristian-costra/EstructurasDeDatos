

/*
El valor T() es como inicializar std::string() pero para un valor plantilla, creo. Por ello, T() da el valor nulo por defecto del tipo de dato especificado. 

Instanciar objetos de varias maneras: 
MyClass obj;
MyClass obj();

MyClass obj(10, "example");  // Constructor parametrizado
MyClass obj{10, "example"};  // Inicialización con llaves
MyClass obj = MyClass(10, "example");  // Inicialización por asignación

MyClass* obj = new MyClass();  // Llamada al constructor por defecto
MyClass* obj = new MyClass;  // Llamada al constructor por defecto

Puedes acceder a los metodos/atributos privados de un objeto si estás dentro de la clase, aunque el método haya sido llamado por otro objeto de la misma clase




entonces cuando yo mando a llamar throw(out_of_range("msg error ")), estoy instanciando un objeto. 
la excepción se trata como un objeto, porque lo es



Variables globales. struct. Hash map. grafos. 
Él inspira más confianza. tmb laqe 
*/


/* // Código para aceptar sólo valores positivos 
        std::cout<<"Ingrese el arco\n(vertice origen, vertice destino): (";
        std::getline(std::cin, tempInput);
        buffer<<tempInput;
        while(!(buffer >> origen) || origen < 0 || origen >= n){
            std::cin.clear();
            std::cout<<"\n"<<buffer.str()<<" es una entrada inválida. Que el vertice sea un valor entre 0 y el último vértice (# de vértices menos 1) \nIngrese el arco\n(vertice origen, vertice destino): (";
            buffer.str("");
            buffer.clear(); // ES necesario poner clear.
            std::getline(std::cin, tempInput); 
            buffer<<tempInput;
        }
        std::cin.clear();
        buffer.str("");
        buffer.clear();

        std::cout<<"Ingrese el arco \n(vertice origen, vertice destino): ("<<origen<<", ";
        std::getline(std::cin, tempInput);
        buffer<<tempInput;
        while(!(buffer >> destino) || destino < 0){
            std::cin.clear();
            std::cout<<"\n"<<buffer.str()<<" es una entrada inválida. Que el vertice sea un valor entre 0 y el último vértice (# de vértices menos 1)\nIngrese el arco\n(vertice origen, vertice destino): ("<<origen<<", ";
            buffer.str("");
            buffer.clear(); // ES necesario poner clear.
            std::getline(std::cin, tempInput); // Poner ignore después de getline hace que se trabe porque getline pasa todo el stream de bits a tempInput, y cuando se quiere ignorar, está vacío el stream
            buffer<<tempInput;
        }
*/